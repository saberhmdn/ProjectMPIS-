{"ast":null,"code":"import api from './api';\nconst ExamService = {\n  // Create a new exam\n  createExam: async examData => {\n    try {\n      console.log('Creating exam with data:', examData);\n\n      // Check if token exists before making the request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found');\n        throw new Error('Authentication required. Please log in again.');\n      }\n      console.log('Token exists in localStorage');\n      const response = await api.post('/api/exams', examData);\n      console.log('Exam created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating exam:', error);\n      throw error;\n    }\n  },\n  // Get all exams for a teacher\n  getTeacherExams: async () => {\n    try {\n      // Check if token exists before making the request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found');\n        throw new Error('Authentication required. Please log in again.');\n      }\n      const response = await api.get('/api/exams/teacher');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher exams:', error);\n      throw error;\n    }\n  },\n  // Get exam by ID\n  getExamById: async examId => {\n    try {\n      // Check if token exists before making the request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found');\n        throw new Error('Authentication required. Please log in again.');\n      }\n      const response = await api.get(`/api/exams/${examId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching exam ${examId}:`, error);\n      throw error;\n    }\n  },\n  // Delete an exam\n  deleteExam: async examId => {\n    try {\n      // Check if token exists before making the request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found');\n        throw new Error('Authentication required. Please log in again.');\n      }\n      const response = await api.delete(`/api/exams/${examId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting exam ${examId}:`, error);\n      throw error;\n    }\n  }\n};\nexport default ExamService;","map":{"version":3,"names":["api","ExamService","createExam","examData","console","log","token","localStorage","getItem","error","Error","response","post","data","getTeacherExams","get","getExamById","examId","deleteExam","delete"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/ExamService.js"],"sourcesContent":["import api from './api';\n\nconst ExamService = {\n    // Create a new exam\n    createExam: async (examData) => {\n        try {\n            console.log('Creating exam with data:', examData);\n            \n            // Check if token exists before making the request\n            const token = localStorage.getItem('token');\n            if (!token) {\n                console.error('No authentication token found');\n                throw new Error('Authentication required. Please log in again.');\n            }\n            \n            console.log('Token exists in localStorage');\n            \n            const response = await api.post('/api/exams', examData);\n            console.log('Exam created successfully:', response.data);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating exam:', error);\n            throw error;\n        }\n    },\n    \n    // Get all exams for a teacher\n    getTeacherExams: async () => {\n        try {\n            // Check if token exists before making the request\n            const token = localStorage.getItem('token');\n            if (!token) {\n                console.error('No authentication token found');\n                throw new Error('Authentication required. Please log in again.');\n            }\n            \n            const response = await api.get('/api/exams/teacher');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching teacher exams:', error);\n            throw error;\n        }\n    },\n    \n    // Get exam by ID\n    getExamById: async (examId) => {\n        try {\n            // Check if token exists before making the request\n            const token = localStorage.getItem('token');\n            if (!token) {\n                console.error('No authentication token found');\n                throw new Error('Authentication required. Please log in again.');\n            }\n            \n            const response = await api.get(`/api/exams/${examId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching exam ${examId}:`, error);\n            throw error;\n        }\n    },\n    \n    // Delete an exam\n    deleteExam: async (examId) => {\n        try {\n            // Check if token exists before making the request\n            const token = localStorage.getItem('token');\n            if (!token) {\n                console.error('No authentication token found');\n                throw new Error('Authentication required. Please log in again.');\n            }\n            \n            const response = await api.delete(`/api/exams/${examId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error deleting exam ${examId}:`, error);\n            throw error;\n        }\n    }\n};\n\nexport default ExamService;\n\n\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAChB;EACAC,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;;MAEjD;MACA,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACRF,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;QAC9C,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MACpE;MAEAN,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAE3C,MAAMM,QAAQ,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,YAAY,EAAET,QAAQ,CAAC;MACvDC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEM,QAAQ,CAACE,IAAI,CAAC;MACxD,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAK,eAAe,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA;MACA,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACRF,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;QAC9C,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MACpE;MAEA,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACe,GAAG,CAAC,oBAAoB,CAAC;MACpD,OAAOJ,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZL,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAO,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC3B,IAAI;MACA;MACA,MAAMX,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACRF,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;QAC9C,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MACpE;MAEA,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACe,GAAG,CAAC,cAAcE,MAAM,EAAE,CAAC;MACtD,OAAON,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZL,OAAO,CAACK,KAAK,CAAC,uBAAuBQ,MAAM,GAAG,EAAER,KAAK,CAAC;MACtD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAS,UAAU,EAAE,MAAOD,MAAM,IAAK;IAC1B,IAAI;MACA;MACA,MAAMX,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACRF,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;QAC9C,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MACpE;MAEA,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACmB,MAAM,CAAC,cAAcF,MAAM,EAAE,CAAC;MACzD,OAAON,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZL,OAAO,CAACK,KAAK,CAAC,uBAAuBQ,MAAM,GAAG,EAAER,KAAK,CAAC;MACtD,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC;AAED,eAAeR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}