{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\n\n// List of possible base URLs to try\nexport const possibleBaseUrls = [config.API_BASE_URL, 'http://localhost:5001', 'http://localhost:5001/api', 'http://localhost:5000', 'http://localhost:5000/api', 'http://localhost:3001', 'http://localhost:3001/api', window.location.origin + '/api'];\n\n// Try to get a previously successful base URL from localStorage\nconst savedBaseUrl = localStorage.getItem('successful_api_url');\nlet currentBaseUrl = savedBaseUrl || possibleBaseUrls[0];\nconsole.log('Initial API base URL:', currentBaseUrl);\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: currentBaseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 15000 // 15 second timeout\n});\n\n// Function to update the base URL\nexport const updateBaseUrl = newBaseUrl => {\n  currentBaseUrl = newBaseUrl;\n  api.defaults.baseURL = newBaseUrl;\n  localStorage.setItem('successful_api_url', newBaseUrl);\n  console.log('API base URL updated to:', newBaseUrl);\n};\n\n// Function to try all possible base URLs\nexport const tryAllBaseUrls = async (path, method = 'GET', data = null) => {\n  console.log(`Trying all possible base URLs for ${method} ${path}`);\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': token ? `Bearer ${token}` : ''\n  };\n  for (const baseUrl of possibleBaseUrls) {\n    try {\n      console.log(`Attempting ${method} request to ${baseUrl}${path}`);\n      let response;\n      const url = `${baseUrl}${path}`;\n      if (method === 'GET') {\n        response = await axios.get(url, {\n          headers,\n          timeout: 5000\n        });\n      } else if (method === 'POST') {\n        response = await axios.post(url, data, {\n          headers,\n          timeout: 5000\n        });\n      } else if (method === 'PUT') {\n        response = await axios.put(url, data, {\n          headers,\n          timeout: 5000\n        });\n      } else if (method === 'DELETE') {\n        response = await axios.delete(url, {\n          headers,\n          timeout: 5000\n        });\n      }\n\n      // If we get here, the request was successful\n      console.log(`Success with ${baseUrl}${path}`);\n\n      // Update the base URL for future requests\n      updateBaseUrl(baseUrl);\n      return response;\n    } catch (error) {\n      console.error(`Failed with ${baseUrl}${path}:`, error.message);\n      // Continue to the next base URL\n    }\n  }\n\n  // If all attempts fail, throw an error\n  throw new Error('All API endpoint attempts failed. Server may be down or unreachable.');\n};\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('API Request:', config.method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors and retry with different base URLs if needed\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.config.url);\n  return response;\n}, async error => {\n  console.error('API Error:', error);\n\n  // If there's no response or a network error, try all possible base URLs\n  if (!error.response || error.code === 'ECONNABORTED' || error.response.status === 404) {\n    try {\n      const originalRequest = error.config;\n      const method = originalRequest.method.toUpperCase();\n      const path = originalRequest.url.replace(originalRequest.baseURL, '');\n      const data = originalRequest.data ? JSON.parse(originalRequest.data) : null;\n      console.log(`Retrying request with all possible base URLs: ${method} ${path}`);\n\n      // Try all possible base URLs\n      const response = await tryAllBaseUrls(path, method, data);\n      return response;\n    } catch (retryError) {\n      console.error('All retry attempts failed:', retryError);\n      return Promise.reject(retryError);\n    }\n  }\n  if (error.response && error.response.status === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Export the API instance and helper functions\nexport default api;","map":{"version":3,"names":["axios","config","possibleBaseUrls","API_BASE_URL","window","location","origin","savedBaseUrl","localStorage","getItem","currentBaseUrl","console","log","api","create","baseURL","headers","timeout","updateBaseUrl","newBaseUrl","defaults","setItem","tryAllBaseUrls","path","method","data","token","baseUrl","response","url","get","post","put","delete","error","message","Error","interceptors","request","use","toUpperCase","Promise","reject","status","code","originalRequest","replace","JSON","parse","retryError","removeItem","href"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport config from '../config';\r\n\r\n// List of possible base URLs to try\r\nexport const possibleBaseUrls = [\r\n    config.API_BASE_URL,\r\n    'http://localhost:5001',\r\n    'http://localhost:5001/api',\r\n    'http://localhost:5000',\r\n    'http://localhost:5000/api',\r\n    'http://localhost:3001',\r\n    'http://localhost:3001/api',\r\n    window.location.origin + '/api'\r\n];\r\n\r\n// Try to get a previously successful base URL from localStorage\r\nconst savedBaseUrl = localStorage.getItem('successful_api_url');\r\nlet currentBaseUrl = savedBaseUrl || possibleBaseUrls[0];\r\n\r\nconsole.log('Initial API base URL:', currentBaseUrl);\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n    baseURL: currentBaseUrl,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    timeout: 15000 // 15 second timeout\r\n});\r\n\r\n// Function to update the base URL\r\nexport const updateBaseUrl = (newBaseUrl) => {\r\n    currentBaseUrl = newBaseUrl;\r\n    api.defaults.baseURL = newBaseUrl;\r\n    localStorage.setItem('successful_api_url', newBaseUrl);\r\n    console.log('API base URL updated to:', newBaseUrl);\r\n};\r\n\r\n// Function to try all possible base URLs\r\nexport const tryAllBaseUrls = async (path, method = 'GET', data = null) => {\r\n    console.log(`Trying all possible base URLs for ${method} ${path}`);\r\n    \r\n    const token = localStorage.getItem('token');\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : ''\r\n    };\r\n    \r\n    for (const baseUrl of possibleBaseUrls) {\r\n        try {\r\n            console.log(`Attempting ${method} request to ${baseUrl}${path}`);\r\n            \r\n            let response;\r\n            const url = `${baseUrl}${path}`;\r\n            \r\n            if (method === 'GET') {\r\n                response = await axios.get(url, { headers, timeout: 5000 });\r\n            } else if (method === 'POST') {\r\n                response = await axios.post(url, data, { headers, timeout: 5000 });\r\n            } else if (method === 'PUT') {\r\n                response = await axios.put(url, data, { headers, timeout: 5000 });\r\n            } else if (method === 'DELETE') {\r\n                response = await axios.delete(url, { headers, timeout: 5000 });\r\n            }\r\n            \r\n            // If we get here, the request was successful\r\n            console.log(`Success with ${baseUrl}${path}`);\r\n            \r\n            // Update the base URL for future requests\r\n            updateBaseUrl(baseUrl);\r\n            \r\n            return response;\r\n        } catch (error) {\r\n            console.error(`Failed with ${baseUrl}${path}:`, error.message);\r\n            // Continue to the next base URL\r\n        }\r\n    }\r\n    \r\n    // If all attempts fail, throw an error\r\n    throw new Error('All API endpoint attempts failed. Server may be down or unreachable.');\r\n};\r\n\r\n// Add a request interceptor to include auth token\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        console.log('API Request:', config.method.toUpperCase(), config.url);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add a response interceptor to handle errors and retry with different base URLs if needed\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log('API Response:', response.status, response.config.url);\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        console.error('API Error:', error);\r\n        \r\n        // If there's no response or a network error, try all possible base URLs\r\n        if (!error.response || error.code === 'ECONNABORTED' || error.response.status === 404) {\r\n            try {\r\n                const originalRequest = error.config;\r\n                const method = originalRequest.method.toUpperCase();\r\n                const path = originalRequest.url.replace(originalRequest.baseURL, '');\r\n                const data = originalRequest.data ? JSON.parse(originalRequest.data) : null;\r\n                \r\n                console.log(`Retrying request with all possible base URLs: ${method} ${path}`);\r\n                \r\n                // Try all possible base URLs\r\n                const response = await tryAllBaseUrls(path, method, data);\r\n                \r\n                return response;\r\n            } catch (retryError) {\r\n                console.error('All retry attempts failed:', retryError);\r\n                return Promise.reject(retryError);\r\n            }\r\n        }\r\n        \r\n        if (error.response && error.response.status === 401) {\r\n            // Handle unauthorized access\r\n            localStorage.removeItem('token');\r\n            window.location.href = '/login';\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Export the API instance and helper functions\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}