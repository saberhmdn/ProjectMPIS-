{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nconst API_URL = `${config.API_BASE_URL}/api/exams`;\nclass ExamService {\n  // Get all exams for a teacher\n  async getTeacherExams() {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/teacher`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Create a new exam\n  async createExam(examData) {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(API_URL, examData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Get a specific exam by ID\n  async getExamById(examId) {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/${examId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Update an exam\n  async updateExam(examId, examData) {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(`${API_URL}/${examId}`, examData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Delete an exam\n  async deleteExam(examId) {\n    const token = localStorage.getItem('token');\n    const response = await axios.delete(`${API_URL}/${examId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Add a question to an exam\n  async addQuestion(examId, questionData) {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/${examId}/questions`, questionData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n}\nexport default new ExamService();","map":{"version":3,"names":["axios","config","API_URL","API_BASE_URL","ExamService","getTeacherExams","token","localStorage","getItem","response","get","headers","Authorization","data","createExam","examData","post","getExamById","examId","updateExam","put","deleteExam","delete","addQuestion","questionData"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/ExamService.js"],"sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nconst API_URL = `${config.API_BASE_URL}/api/exams`;\n\nclass ExamService {\n    // Get all exams for a teacher\n    async getTeacherExams() {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/teacher`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Create a new exam\n    async createExam(examData) {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(API_URL, examData, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Get a specific exam by ID\n    async getExamById(examId) {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/${examId}`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Update an exam\n    async updateExam(examId, examData) {\n        const token = localStorage.getItem('token');\n        const response = await axios.put(`${API_URL}/${examId}`, examData, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Delete an exam\n    async deleteExam(examId) {\n        const token = localStorage.getItem('token');\n        const response = await axios.delete(`${API_URL}/${examId}`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Add a question to an exam\n    async addQuestion(examId, questionData) {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(`${API_URL}/${examId}/questions`, questionData, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n}\n\nexport default new ExamService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,OAAO,GAAG,GAAGD,MAAM,CAACE,YAAY,YAAY;AAElD,MAAMC,WAAW,CAAC;EACd;EACA,MAAMC,eAAeA,CAAA,EAAG;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,GAAGR,OAAO,UAAU,EAAE;MACnDS,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;;EAEA;EACA,MAAMC,UAAUA,CAACC,QAAQ,EAAE;IACvB,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACgB,IAAI,CAACd,OAAO,EAAEa,QAAQ,EAAE;MACjDJ,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;;EAEA;EACA,MAAMI,WAAWA,CAACC,MAAM,EAAE;IACtB,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,GAAGR,OAAO,IAAIgB,MAAM,EAAE,EAAE;MACrDP,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;;EAEA;EACA,MAAMM,UAAUA,CAACD,MAAM,EAAEH,QAAQ,EAAE;IAC/B,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACoB,GAAG,CAAC,GAAGlB,OAAO,IAAIgB,MAAM,EAAE,EAAEH,QAAQ,EAAE;MAC/DJ,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;;EAEA;EACA,MAAMQ,UAAUA,CAACH,MAAM,EAAE;IACrB,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACsB,MAAM,CAAC,GAAGpB,OAAO,IAAIgB,MAAM,EAAE,EAAE;MACxDP,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;;EAEA;EACA,MAAMU,WAAWA,CAACL,MAAM,EAAEM,YAAY,EAAE;IACpC,MAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACgB,IAAI,CAAC,GAAGd,OAAO,IAAIgB,MAAM,YAAY,EAAEM,YAAY,EAAE;MAC9Eb,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUN,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACxB;AACJ;AAEA,eAAe,IAAIT,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}