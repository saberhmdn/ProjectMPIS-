{"ast":null,"code":"import api from './api';\nclass CourseService {\n  // Get all courses for the logged-in teacher\n  async getTeacherCourses() {\n    try {\n      // Try both possible endpoint paths\n      try {\n        const response = await api.get('/courses/my-courses');\n        return response.data;\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // Try alternative endpoint\n          const response = await api.get('/api/courses/my-courses');\n          return response.data;\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error fetching teacher courses:', error);\n      throw error;\n    }\n  }\n\n  // Create a new course\n  async createCourse(courseData) {\n    try {\n      // Try both possible endpoint paths\n      try {\n        const response = await api.post('/courses', courseData);\n        return response.data;\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // Try alternative endpoint\n          const response = await api.post('/api/courses', courseData);\n          return response.data;\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific course by ID\n  async getCourseById(courseId) {\n    try {\n      try {\n        const response = await api.get(`/courses/${courseId}`);\n        return response.data;\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // Try alternative endpoint\n          const response = await api.get(`/api/courses/${courseId}`);\n          return response.data;\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error(`Error fetching course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Update a course\n  async updateCourse(courseId, courseData) {\n    try {\n      try {\n        const response = await api.put(`/courses/${courseId}`, courseData);\n        return response.data;\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // Try alternative endpoint\n          const response = await api.put(`/api/courses/${courseId}`, courseData);\n          return response.data;\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error(`Error updating course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Delete a course\n  async deleteCourse(courseId) {\n    try {\n      try {\n        const response = await api.delete(`/courses/${courseId}`);\n        return response.data;\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // Try alternative endpoint\n          const response = await api.delete(`/api/courses/${courseId}`);\n          return response.data;\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error(`Error deleting course ${courseId}:`, error);\n      throw error;\n    }\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["api","CourseService","getTeacherCourses","response","get","data","error","status","console","createCourse","courseData","post","getCourseById","courseId","updateCourse","put","deleteCourse","delete"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/CourseService.js"],"sourcesContent":["import api from './api';\n\nclass CourseService {\n    // Get all courses for the logged-in teacher\n    async getTeacherCourses() {\n        try {\n            // Try both possible endpoint paths\n            try {\n                const response = await api.get('/courses/my-courses');\n                return response.data;\n            } catch (error) {\n                if (error.response && error.response.status === 404) {\n                    // Try alternative endpoint\n                    const response = await api.get('/api/courses/my-courses');\n                    return response.data;\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error('Error fetching teacher courses:', error);\n            throw error;\n        }\n    }\n\n    // Create a new course\n    async createCourse(courseData) {\n        try {\n            // Try both possible endpoint paths\n            try {\n                const response = await api.post('/courses', courseData);\n                return response.data;\n            } catch (error) {\n                if (error.response && error.response.status === 404) {\n                    // Try alternative endpoint\n                    const response = await api.post('/api/courses', courseData);\n                    return response.data;\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error('Error creating course:', error);\n            throw error;\n        }\n    }\n\n    // Get a specific course by ID\n    async getCourseById(courseId) {\n        try {\n            try {\n                const response = await api.get(`/courses/${courseId}`);\n                return response.data;\n            } catch (error) {\n                if (error.response && error.response.status === 404) {\n                    // Try alternative endpoint\n                    const response = await api.get(`/api/courses/${courseId}`);\n                    return response.data;\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error(`Error fetching course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Update a course\n    async updateCourse(courseId, courseData) {\n        try {\n            try {\n                const response = await api.put(`/courses/${courseId}`, courseData);\n                return response.data;\n            } catch (error) {\n                if (error.response && error.response.status === 404) {\n                    // Try alternative endpoint\n                    const response = await api.put(`/api/courses/${courseId}`, courseData);\n                    return response.data;\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error(`Error updating course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Delete a course\n    async deleteCourse(courseId) {\n        try {\n            try {\n                const response = await api.delete(`/courses/${courseId}`);\n                return response.data;\n            } catch (error) {\n                if (error.response && error.response.status === 404) {\n                    // Try alternative endpoint\n                    const response = await api.delete(`/api/courses/${courseId}`);\n                    return response.data;\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error(`Error deleting course ${courseId}:`, error);\n            throw error;\n        }\n    }\n}\n\nexport default new CourseService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}