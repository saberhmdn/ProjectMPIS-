{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nclass CourseService {\n  constructor() {\n    // Store the base URLs to try\n    this.baseUrls = [config.API_BASE_URL, config.API_BASE_URL + '/api', 'http://localhost:5001', 'http://localhost:5001/api', 'http://localhost:5000', 'http://localhost:5000/api', 'http://localhost:3001', 'http://localhost:3001/api'];\n    console.log('CourseService initialized with base URLs:', this.baseUrls);\n  }\n\n  // Helper method to try multiple base URLs\n  async tryEndpoints(path, method, data = null) {\n    let lastError = null;\n\n    // Log the attempt\n    console.log(`Attempting to ${method} ${path} with multiple base URLs`);\n\n    // Try each base URL\n    for (const baseUrl of this.baseUrls) {\n      try {\n        const url = `${baseUrl}${path}`;\n        console.log(`Trying: ${method} ${url}`);\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json',\n          'Authorization': token ? `Bearer ${token}` : ''\n        };\n        let response;\n        if (method === 'GET') {\n          response = await axios.get(url, {\n            headers\n          });\n        } else if (method === 'POST') {\n          response = await axios.post(url, data, {\n            headers\n          });\n        } else if (method === 'PUT') {\n          response = await axios.put(url, data, {\n            headers\n          });\n        } else if (method === 'DELETE') {\n          response = await axios.delete(url, {\n            headers\n          });\n        }\n        console.log(`Success with ${url}:`, response.data);\n\n        // Store the successful base URL for future use\n        localStorage.setItem('successful_api_url', baseUrl);\n        return response.data;\n      } catch (error) {\n        console.error(`Error with ${baseUrl}${path}:`, error.message);\n        lastError = error;\n        // Continue to the next base URL\n      }\n    }\n\n    // If we get here, all attempts failed\n    console.error('All API endpoint attempts failed');\n    throw lastError;\n  }\n\n  // Get all courses for the logged-in teacher\n  async getTeacherCourses() {\n    try {\n      return await this.tryEndpoints('/courses/my-courses', 'GET');\n    } catch (error) {\n      console.error('Error fetching teacher courses:', error);\n      throw error;\n    }\n  }\n\n  // Create a new course\n  async createCourse(courseData) {\n    try {\n      // Log the course data being sent\n      console.log('Creating course with data:', JSON.stringify(courseData, null, 2));\n\n      // Try the /courses endpoint\n      return await this.tryEndpoints('/courses', 'POST', courseData);\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific course by ID\n  async getCourseById(courseId) {\n    try {\n      return await this.tryEndpoints(`/courses/${courseId}`, 'GET');\n    } catch (error) {\n      console.error(`Error fetching course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Update a course\n  async updateCourse(courseId, courseData) {\n    try {\n      return await this.tryEndpoints(`/courses/${courseId}`, 'PUT', courseData);\n    } catch (error) {\n      console.error(`Error updating course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Delete a course\n  async deleteCourse(courseId) {\n    try {\n      return await this.tryEndpoints(`/courses/${courseId}`, 'DELETE');\n    } catch (error) {\n      console.error(`Error deleting course ${courseId}:`, error);\n      throw error;\n    }\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["axios","config","CourseService","constructor","baseUrls","API_BASE_URL","console","log","tryEndpoints","path","method","data","lastError","baseUrl","url","token","localStorage","getItem","headers","response","get","post","put","delete","setItem","error","message","getTeacherCourses","createCourse","courseData","JSON","stringify","getCourseById","courseId","updateCourse","deleteCourse"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/CourseService.js"],"sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nclass CourseService {\n    constructor() {\n        // Store the base URLs to try\n        this.baseUrls = [\n            config.API_BASE_URL,\n            config.API_BASE_URL + '/api',\n            'http://localhost:5001',\n            'http://localhost:5001/api',\n            'http://localhost:5000',\n            'http://localhost:5000/api',\n            'http://localhost:3001',\n            'http://localhost:3001/api'\n        ];\n        console.log('CourseService initialized with base URLs:', this.baseUrls);\n    }\n\n    // Helper method to try multiple base URLs\n    async tryEndpoints(path, method, data = null) {\n        let lastError = null;\n        \n        // Log the attempt\n        console.log(`Attempting to ${method} ${path} with multiple base URLs`);\n        \n        // Try each base URL\n        for (const baseUrl of this.baseUrls) {\n            try {\n                const url = `${baseUrl}${path}`;\n                console.log(`Trying: ${method} ${url}`);\n                \n                const token = localStorage.getItem('token');\n                const headers = {\n                    'Content-Type': 'application/json',\n                    'Authorization': token ? `Bearer ${token}` : ''\n                };\n                \n                let response;\n                if (method === 'GET') {\n                    response = await axios.get(url, { headers });\n                } else if (method === 'POST') {\n                    response = await axios.post(url, data, { headers });\n                } else if (method === 'PUT') {\n                    response = await axios.put(url, data, { headers });\n                } else if (method === 'DELETE') {\n                    response = await axios.delete(url, { headers });\n                }\n                \n                console.log(`Success with ${url}:`, response.data);\n                \n                // Store the successful base URL for future use\n                localStorage.setItem('successful_api_url', baseUrl);\n                \n                return response.data;\n            } catch (error) {\n                console.error(`Error with ${baseUrl}${path}:`, error.message);\n                lastError = error;\n                // Continue to the next base URL\n            }\n        }\n        \n        // If we get here, all attempts failed\n        console.error('All API endpoint attempts failed');\n        throw lastError;\n    }\n\n    // Get all courses for the logged-in teacher\n    async getTeacherCourses() {\n        try {\n            return await this.tryEndpoints('/courses/my-courses', 'GET');\n        } catch (error) {\n            console.error('Error fetching teacher courses:', error);\n            throw error;\n        }\n    }\n\n    // Create a new course\n    async createCourse(courseData) {\n        try {\n            // Log the course data being sent\n            console.log('Creating course with data:', JSON.stringify(courseData, null, 2));\n            \n            // Try the /courses endpoint\n            return await this.tryEndpoints('/courses', 'POST', courseData);\n        } catch (error) {\n            console.error('Error creating course:', error);\n            throw error;\n        }\n    }\n\n    // Get a specific course by ID\n    async getCourseById(courseId) {\n        try {\n            return await this.tryEndpoints(`/courses/${courseId}`, 'GET');\n        } catch (error) {\n            console.error(`Error fetching course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Update a course\n    async updateCourse(courseId, courseData) {\n        try {\n            return await this.tryEndpoints(`/courses/${courseId}`, 'PUT', courseData);\n        } catch (error) {\n            console.error(`Error updating course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Delete a course\n    async deleteCourse(courseId) {\n        try {\n            return await this.tryEndpoints(`/courses/${courseId}`, 'DELETE');\n        } catch (error) {\n            console.error(`Error deleting course ${courseId}:`, error);\n            throw error;\n        }\n    }\n}\n\nexport default new CourseService();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}