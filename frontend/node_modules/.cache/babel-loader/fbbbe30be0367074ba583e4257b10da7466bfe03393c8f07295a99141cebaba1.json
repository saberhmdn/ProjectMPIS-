{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('Sending request with token:', token ? token.substring(0, 15) + '...' : 'no token');\n  if (token) {\n    // Make sure to format the Authorization header correctly\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 errors globally\n  if (error.response && error.response.status === 401) {\n    console.error('Authentication error:', error.response.data);\n\n    // You could redirect to login here\n    // window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","substring","error","Promise","reject","response","status","data"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Add a request interceptor to include the auth token in all requests\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        console.log('Sending request with token:', token ? token.substring(0, 15) + '...' : 'no token');\r\n        \r\n        if (token) {\r\n            // Make sure to format the Authorization header correctly\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add a response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    (error) => {\r\n        // Handle 401 errors globally\r\n        if (error.response && error.response.status === 401) {\r\n            console.error('Authentication error:', error.response.data);\r\n            \r\n            // You could redirect to login here\r\n            // window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEJ,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,UAAU,CAAC;EAE/F,IAAIL,KAAK,EAAE;IACP;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACvD;EAEA,OAAOD,MAAM;AACjB,CAAC,EACAO,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAjB,GAAG,CAACO,YAAY,CAACa,QAAQ,CAACX,GAAG,CACxBW,QAAQ,IAAK;EACV,OAAOA,QAAQ;AACnB,CAAC,EACAH,KAAK,IAAK;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjDP,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;;IAE3D;IACA;EACJ;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}