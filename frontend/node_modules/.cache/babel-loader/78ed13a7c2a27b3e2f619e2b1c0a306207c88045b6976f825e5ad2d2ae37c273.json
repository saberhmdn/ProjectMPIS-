{"ast":null,"code":"import api, { tryAllBaseUrls } from './api';\nclass CourseService {\n  constructor() {\n    console.log('CourseService initialized');\n  }\n\n  // Get all courses for the logged-in teacher\n  async getTeacherCourses() {\n    try {\n      console.log('Fetching teacher courses');\n      const response = await api.get('/courses/my-courses');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher courses:', error);\n\n      // Try with all possible base URLs\n      try {\n        const response = await tryAllBaseUrls('/courses/my-courses', 'GET');\n        return response.data;\n      } catch (retryError) {\n        console.error('All attempts to fetch teacher courses failed:', retryError);\n        throw retryError;\n      }\n    }\n  }\n\n  // Create a new course\n  async createCourse(courseData) {\n    try {\n      console.log('Creating course with data:', JSON.stringify(courseData, null, 2));\n\n      // First try with the current base URL\n      const response = await api.post('/courses', courseData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating course with primary endpoint:', error);\n\n      // Try with all possible base URLs\n      try {\n        console.log('Retrying course creation with all possible base URLs');\n        const response = await tryAllBaseUrls('/courses', 'POST', courseData);\n        return response.data;\n      } catch (retryError) {\n        console.error('All attempts to create course failed:', retryError);\n        throw retryError;\n      }\n    }\n  }\n\n  // Get a specific course by ID\n  async getCourseById(courseId) {\n    try {\n      const response = await api.get(`/courses/${courseId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching course ${courseId}:`, error);\n\n      // Try with all possible base URLs\n      try {\n        const response = await tryAllBaseUrls(`/courses/${courseId}`, 'GET');\n        return response.data;\n      } catch (retryError) {\n        console.error(`All attempts to fetch course ${courseId} failed:`, retryError);\n        throw retryError;\n      }\n    }\n  }\n\n  // Update a course\n  async updateCourse(courseId, courseData) {\n    try {\n      const response = await api.put(`/courses/${courseId}`, courseData);\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating course ${courseId}:`, error);\n\n      // Try with all possible base URLs\n      try {\n        const response = await tryAllBaseUrls(`/courses/${courseId}`, 'PUT', courseData);\n        return response.data;\n      } catch (retryError) {\n        console.error(`All attempts to update course ${courseId} failed:`, retryError);\n        throw retryError;\n      }\n    }\n  }\n\n  // Delete a course\n  async deleteCourse(courseId) {\n    try {\n      const response = await api.delete(`/courses/${courseId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting course ${courseId}:`, error);\n\n      // Try with all possible base URLs\n      try {\n        const response = await tryAllBaseUrls(`/courses/${courseId}`, 'DELETE');\n        return response.data;\n      } catch (retryError) {\n        console.error(`All attempts to delete course ${courseId} failed:`, retryError);\n        throw retryError;\n      }\n    }\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["api","tryAllBaseUrls","CourseService","constructor","console","log","getTeacherCourses","response","get","data","error","retryError","createCourse","courseData","JSON","stringify","post","getCourseById","courseId","updateCourse","put","deleteCourse","delete"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/CourseService.js"],"sourcesContent":["import api, { tryAllBaseUrls } from './api';\n\nclass CourseService {\n    constructor() {\n        console.log('CourseService initialized');\n    }\n\n    // Get all courses for the logged-in teacher\n    async getTeacherCourses() {\n        try {\n            console.log('Fetching teacher courses');\n            const response = await api.get('/courses/my-courses');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching teacher courses:', error);\n            \n            // Try with all possible base URLs\n            try {\n                const response = await tryAllBaseUrls('/courses/my-courses', 'GET');\n                return response.data;\n            } catch (retryError) {\n                console.error('All attempts to fetch teacher courses failed:', retryError);\n                throw retryError;\n            }\n        }\n    }\n\n    // Create a new course\n    async createCourse(courseData) {\n        try {\n            console.log('Creating course with data:', JSON.stringify(courseData, null, 2));\n            \n            // First try with the current base URL\n            const response = await api.post('/courses', courseData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating course with primary endpoint:', error);\n            \n            // Try with all possible base URLs\n            try {\n                console.log('Retrying course creation with all possible base URLs');\n                const response = await tryAllBaseUrls('/courses', 'POST', courseData);\n                return response.data;\n            } catch (retryError) {\n                console.error('All attempts to create course failed:', retryError);\n                throw retryError;\n            }\n        }\n    }\n\n    // Get a specific course by ID\n    async getCourseById(courseId) {\n        try {\n            const response = await api.get(`/courses/${courseId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching course ${courseId}:`, error);\n            \n            // Try with all possible base URLs\n            try {\n                const response = await tryAllBaseUrls(`/courses/${courseId}`, 'GET');\n                return response.data;\n            } catch (retryError) {\n                console.error(`All attempts to fetch course ${courseId} failed:`, retryError);\n                throw retryError;\n            }\n        }\n    }\n\n    // Update a course\n    async updateCourse(courseId, courseData) {\n        try {\n            const response = await api.put(`/courses/${courseId}`, courseData);\n            return response.data;\n        } catch (error) {\n            console.error(`Error updating course ${courseId}:`, error);\n            \n            // Try with all possible base URLs\n            try {\n                const response = await tryAllBaseUrls(`/courses/${courseId}`, 'PUT', courseData);\n                return response.data;\n            } catch (retryError) {\n                console.error(`All attempts to update course ${courseId} failed:`, retryError);\n                throw retryError;\n            }\n        }\n    }\n\n    // Delete a course\n    async deleteCourse(courseId) {\n        try {\n            const response = await api.delete(`/courses/${courseId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error deleting course ${courseId}:`, error);\n            \n            // Try with all possible base URLs\n            try {\n                const response = await tryAllBaseUrls(`/courses/${courseId}`, 'DELETE');\n                return response.data;\n            } catch (retryError) {\n                console.error(`All attempts to delete course ${courseId} failed:`, retryError);\n                throw retryError;\n            }\n        }\n    }\n}\n\nexport default new CourseService();\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}