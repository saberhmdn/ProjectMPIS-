{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nconst API_URL = `${config.API_BASE_URL}/api/exams`;\nclass ExamService {\n  // Create a new exam\n  async createExam(examData) {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(API_URL, examData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Get all exams for a teacher\n  async getTeacherExams() {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/teacher`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Get a specific exam by ID\n  async getExamById(examId) {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/${examId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Update an exam\n  async updateExam(examId, examData) {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(`${API_URL}/${examId}`, examData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Delete an exam\n  async deleteExam(examId) {\n    const token = localStorage.getItem('token');\n    const response = await axios.delete(`${API_URL}/${examId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Get active exams (for students)\n  async getActiveExams() {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/active`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Submit an exam (for students)\n  async submitExam(examId, answers) {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/${examId}/submit`, {\n      answers\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n\n  // Get exam results (for both teachers and students)\n  async getExamResults(examId) {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/${examId}/results`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n}\nexport default new ExamService();","map":{"version":3,"names":["axios","config","API_URL","API_BASE_URL","ExamService","createExam","examData","token","localStorage","getItem","response","post","headers","Authorization","data","getTeacherExams","get","getExamById","examId","updateExam","put","deleteExam","delete","getActiveExams","submitExam","answers","getExamResults"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/ExamService.js"],"sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nconst API_URL = `${config.API_BASE_URL}/api/exams`;\n\nclass ExamService {\n    // Create a new exam\n    async createExam(examData) {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(API_URL, examData, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Get all exams for a teacher\n    async getTeacherExams() {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/teacher`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Get a specific exam by ID\n    async getExamById(examId) {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/${examId}`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Update an exam\n    async updateExam(examId, examData) {\n        const token = localStorage.getItem('token');\n        const response = await axios.put(`${API_URL}/${examId}`, examData, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Delete an exam\n    async deleteExam(examId) {\n        const token = localStorage.getItem('token');\n        const response = await axios.delete(`${API_URL}/${examId}`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Get active exams (for students)\n    async getActiveExams() {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/active`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Submit an exam (for students)\n    async submitExam(examId, answers) {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(`${API_URL}/${examId}/submit`, { answers }, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n\n    // Get exam results (for both teachers and students)\n    async getExamResults(examId) {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/${examId}/results`, {\n            headers: { Authorization: `Bearer ${token}` }\n        });\n        return response.data;\n    }\n}\n\nexport default new ExamService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}