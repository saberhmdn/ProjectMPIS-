{"ast":null,"code":"import api from './api';\nconst API_PATH = '/api/exams';\nclass ExamService {\n  // Create a new exam\n  async createExam(examData) {\n    try {\n      const response = await api.post(API_PATH, examData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating exam:', error);\n      throw error;\n    }\n  }\n\n  // Get all exams for a teacher\n  async getTeacherExams() {\n    try {\n      const response = await api.get(`${API_PATH}/teacher`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher exams:', error);\n      throw error;\n    }\n  }\n\n  // Get active exams for students\n  async getActiveExams() {\n    try {\n      const response = await api.get(`${API_PATH}/active`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching active exams:', error);\n      throw error;\n    }\n  }\n\n  // Get exam details by ID\n  async getExamById(examId) {\n    try {\n      const response = await api.get(`${API_PATH}/${examId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching exam details:', error);\n      throw error;\n    }\n  }\n\n  // Update an exam\n  async updateExam(examId, examData) {\n    try {\n      const response = await api.put(`${API_PATH}/${examId}`, examData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating exam:', error);\n      throw error;\n    }\n  }\n\n  // Delete an exam\n  async deleteExam(examId) {\n    try {\n      const response = await api.delete(`${API_PATH}/${examId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting exam:', error);\n      throw error;\n    }\n  }\n\n  // Submit an exam (for students)\n  async submitExam(examId, answers) {\n    try {\n      const response = await api.post(`${API_PATH}/${examId}/submit`, {\n        answers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error submitting exam:', error);\n      throw error;\n    }\n  }\n\n  // Get exam results\n  async getExamResults(examId) {\n    try {\n      const response = await api.get(`${API_PATH}/${examId}/results`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching exam results:', error);\n      throw error;\n    }\n  }\n}\nexport default new ExamService();","map":{"version":3,"names":["api","API_PATH","ExamService","createExam","examData","response","post","data","error","console","getTeacherExams","get","getActiveExams","getExamById","examId","updateExam","put","deleteExam","delete","submitExam","answers","getExamResults"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/ExamService.js"],"sourcesContent":["import api from './api';\n\nconst API_PATH = '/api/exams';\n\nclass ExamService {\n    // Create a new exam\n    async createExam(examData) {\n        try {\n            const response = await api.post(API_PATH, examData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating exam:', error);\n            throw error;\n        }\n    }\n\n    // Get all exams for a teacher\n    async getTeacherExams() {\n        try {\n            const response = await api.get(`${API_PATH}/teacher`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching teacher exams:', error);\n            throw error;\n        }\n    }\n\n    // Get active exams for students\n    async getActiveExams() {\n        try {\n            const response = await api.get(`${API_PATH}/active`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching active exams:', error);\n            throw error;\n        }\n    }\n\n    // Get exam details by ID\n    async getExamById(examId) {\n        try {\n            const response = await api.get(`${API_PATH}/${examId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching exam details:', error);\n            throw error;\n        }\n    }\n\n    // Update an exam\n    async updateExam(examId, examData) {\n        try {\n            const response = await api.put(`${API_PATH}/${examId}`, examData);\n            return response.data;\n        } catch (error) {\n            console.error('Error updating exam:', error);\n            throw error;\n        }\n    }\n\n    // Delete an exam\n    async deleteExam(examId) {\n        try {\n            const response = await api.delete(`${API_PATH}/${examId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting exam:', error);\n            throw error;\n        }\n    }\n\n    // Submit an exam (for students)\n    async submitExam(examId, answers) {\n        try {\n            const response = await api.post(`${API_PATH}/${examId}/submit`, { answers });\n            return response.data;\n        } catch (error) {\n            console.error('Error submitting exam:', error);\n            throw error;\n        }\n    }\n\n    // Get exam results\n    async getExamResults(examId) {\n        try {\n            const response = await api.get(`${API_PATH}/${examId}/results`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching exam results:', error);\n            throw error;\n        }\n    }\n}\n\nexport default new ExamService();\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}