{"ast":null,"code":"import api from './api';\nimport axios from 'axios';\nclass CourseService {\n  constructor() {\n    // Store the base URLs to try\n    this.baseUrls = ['http://localhost:5001', 'http://localhost:5001/api', 'http://localhost:5000', 'http://localhost:5000/api', 'http://localhost:3001', 'http://localhost:3001/api'];\n    console.log('CourseService initialized');\n  }\n\n  // Get all courses for the logged-in teacher\n  async getTeacherCourses() {\n    try {\n      const response = await api.get('/api/courses/my-courses');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher courses:', error);\n\n      // Try alternative endpoints if the main one fails\n      return this.tryAlternativeEndpoints('/courses/my-courses', 'GET');\n    }\n  }\n\n  // Create a new course\n  async createCourse(courseData) {\n    try {\n      const response = await api.post('/api/courses', courseData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating course with primary endpoint:', error);\n\n      // Try alternative endpoints if the main one fails\n      return this.tryAlternativeEndpoints('/courses', 'POST', courseData);\n    }\n  }\n\n  // Helper method to try multiple base URLs\n  async tryAlternativeEndpoints(path, method, data = null) {\n    console.log(`Trying alternative endpoints for ${method} ${path}`);\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    };\n    for (const baseUrl of this.baseUrls) {\n      try {\n        const url = `${baseUrl}${path}`;\n        console.log(`Trying: ${method} ${url}`);\n        let response;\n        if (method === 'GET') {\n          response = await axios.get(url, {\n            headers\n          });\n        } else if (method === 'POST') {\n          response = await axios.post(url, data, {\n            headers\n          });\n        } else if (method === 'PUT') {\n          response = await axios.put(url, data, {\n            headers\n          });\n        } else if (method === 'DELETE') {\n          response = await axios.delete(url, {\n            headers\n          });\n        }\n        console.log(`Success with ${url}:`, response.data);\n        return response.data;\n      } catch (error) {\n        console.error(`Failed with ${baseUrl}${path}:`, error.message);\n        // Continue to the next base URL\n      }\n    }\n\n    // If all attempts fail, throw an error\n    throw new Error('All API endpoint attempts failed');\n  }\n\n  // Get a specific course by ID\n  async getCourseById(courseId) {\n    try {\n      const response = await api.get(`/api/courses/${courseId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Update a course\n  async updateCourse(courseId, courseData) {\n    try {\n      const response = await api.put(`/api/courses/${courseId}`, courseData);\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating course ${courseId}:`, error);\n      throw error;\n    }\n  }\n\n  // Delete a course\n  async deleteCourse(courseId) {\n    try {\n      const response = await api.delete(`/api/courses/${courseId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting course ${courseId}:`, error);\n      throw error;\n    }\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["api","axios","CourseService","constructor","baseUrls","console","log","getTeacherCourses","response","get","data","error","tryAlternativeEndpoints","createCourse","courseData","post","path","method","token","localStorage","getItem","headers","baseUrl","url","put","delete","message","Error","getCourseById","courseId","updateCourse","deleteCourse"],"sources":["C:/Users/saber/OneDrive/Bureau/projetMIPS$/frontend/src/services/CourseService.js"],"sourcesContent":["import api from './api';\nimport axios from 'axios';\n\nclass CourseService {\n    constructor() {\n        // Store the base URLs to try\n        this.baseUrls = [\n            'http://localhost:5001',\n            'http://localhost:5001/api',\n            'http://localhost:5000',\n            'http://localhost:5000/api',\n            'http://localhost:3001',\n            'http://localhost:3001/api'\n        ];\n        console.log('CourseService initialized');\n    }\n\n    // Get all courses for the logged-in teacher\n    async getTeacherCourses() {\n        try {\n            const response = await api.get('/api/courses/my-courses');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching teacher courses:', error);\n            \n            // Try alternative endpoints if the main one fails\n            return this.tryAlternativeEndpoints('/courses/my-courses', 'GET');\n        }\n    }\n\n    // Create a new course\n    async createCourse(courseData) {\n        try {\n            const response = await api.post('/api/courses', courseData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating course with primary endpoint:', error);\n            \n            // Try alternative endpoints if the main one fails\n            return this.tryAlternativeEndpoints('/courses', 'POST', courseData);\n        }\n    }\n\n    // Helper method to try multiple base URLs\n    async tryAlternativeEndpoints(path, method, data = null) {\n        console.log(`Trying alternative endpoints for ${method} ${path}`);\n        \n        const token = localStorage.getItem('token');\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': token ? `Bearer ${token}` : ''\n        };\n        \n        for (const baseUrl of this.baseUrls) {\n            try {\n                const url = `${baseUrl}${path}`;\n                console.log(`Trying: ${method} ${url}`);\n                \n                let response;\n                if (method === 'GET') {\n                    response = await axios.get(url, { headers });\n                } else if (method === 'POST') {\n                    response = await axios.post(url, data, { headers });\n                } else if (method === 'PUT') {\n                    response = await axios.put(url, data, { headers });\n                } else if (method === 'DELETE') {\n                    response = await axios.delete(url, { headers });\n                }\n                \n                console.log(`Success with ${url}:`, response.data);\n                return response.data;\n            } catch (error) {\n                console.error(`Failed with ${baseUrl}${path}:`, error.message);\n                // Continue to the next base URL\n            }\n        }\n        \n        // If all attempts fail, throw an error\n        throw new Error('All API endpoint attempts failed');\n    }\n\n    // Get a specific course by ID\n    async getCourseById(courseId) {\n        try {\n            const response = await api.get(`/api/courses/${courseId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Update a course\n    async updateCourse(courseId, courseData) {\n        try {\n            const response = await api.put(`/api/courses/${courseId}`, courseData);\n            return response.data;\n        } catch (error) {\n            console.error(`Error updating course ${courseId}:`, error);\n            throw error;\n        }\n    }\n\n    // Delete a course\n    async deleteCourse(courseId) {\n        try {\n            const response = await api.delete(`/api/courses/${courseId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error deleting course ${courseId}:`, error);\n            throw error;\n        }\n    }\n}\n\nexport default new CourseService();\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}